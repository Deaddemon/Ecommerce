

import User from "../model/userSchema.js";


export const userSignup=  (request, response)=>{

   

        User.findOne( {
           email: request.body.email
        })
        .exec((error, user) =>{
            if(user) return response.status(400).json({
                message: 'user already registered'
            });


            const {
                password,
                username,
                email
            } = request.body;
            const newUser = new User({
                password,
                username,
                email
                //username: Math.random().toString();
            });

                    //await newUser.save();

        newUser.save((error, data) =>{
            if(error){
                //console.log(error);
                return response.status(400).json({
                    message: 'something went wrong'
                });
            }

            if(data){
                return response.status(201).json({
                    message: 'User is successfully registered'
                });
            }
        });

        });
 


        //response.status(200).json('User is successfully registered');


   

}


export const userLogin =  async (request, response)=>{

    try{

        let user = await User.findOne( {
            username: request.body.username,
            password : request.body.password
        })
        if(user){
            return response.status(200).json(`${request.body.username} login successfull`);
        }
        else{
            return response.status(401).json('invalid login');
        }


         

    }catch(error){
        console.log('error',error.message);
    }
    

}





postman: ------------------------
used to hit the api or test the backend if our frontend is not yet ready
 
get api: ----------------------
GET is used to request data from a specified resource.
GET requests can be cached
GET requests remain in the browser history
GET requests can be bookmarked
GET requests should never be used when dealing with sensitive data
GET requests have length restrictions
GET requests are only used to request data (not modify)
ex:
app.get('/',(req,res,next) =>{
  res.status(200).json({
    message:"hello"
  });
});

post api:--------------------------
POST is used to send data to a server to create/update a resource.
The data sent to the server with POST is stored in the request body of the HTTP request:
POST requests are never cached
POST requests do not remain in the browser history
POST requests cannot be bookmarked
POST requests have no restrictions on data length

mongoose virtuals---------------
Virtuals are document properties that do not persist or
 get stored in the MongoDB database, they only exist logically and 
 are not written to the documentâ€™s collection.
 ex: 
 userSchema.virtual('name.full')
    .get(function () {
        return this.name.first + ' ' + this.name.last;
    })
will help us to acces first and last name all together as full name
